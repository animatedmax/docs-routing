---
title: Securing Traffic into Cloud Foundry
owner: Routing
---

<strong><%= modified_date %></strong>

This topic describes how to secure traffic into your Cloud Foundry (CF) deployment with SSL/TLS certificates. 
You can configure your deployment to specify where to terminate TLS depending on your needs. 
You must also configure the load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` HTTP headers to the HTTP traffic it passes to the router.

The advantages of securing the connection between your load balancer and router instances include:

* A high level of security.
* The ability to secure a deployment that shares a load balancer with other deployments.
* The ability to manage certificates as part of your deployment manifest, which eliminates the need for out-of-band configuration of your load balancer.

##<a id="requirements"></a> Requirements

* You must obtain a SSL/TLS certificate. In a production environment, use a signed SSL/TLS certificate from a known certificate authority (CA). In a development or testing environment, you may use a self-signed certificate generated with `openssl` or a similar tool.
* The CF router only supports HTTP requests. Whatever configuration you choose for securing traffic, it must result in the CF router receiving HTTP requests.
* The CF router currently only supports configuring a single HTTPS certificate. [Subject Alternative Name](https://tools.ietf.org/html/rfc5280#section-4.2.1.6), an X.509 extension, can be used to associate multiple domains, including wildcard domains, to a single certificate.

##<a id="lb-and-router"></a> Terminate TLS at Load Balancer and Router
<p class='note'><strong>Note</strong>: The following approach is preferred to terminating TLS at the load balancer.</p>

<%= image_tag("lb-and-router.png") %>

<p class='note'><strong>Note</strong>: Hostname verification between the load balancer and CF router is unnecessary when the load balancer is already configured with the CF router's IP address to correctly route the request. If DNS resolution is being used by the load balancer to route requests to the CF routers, you should enable hostname verification.</p>

In this configuration, CF establishes and terminates two TLS connections: one from the client to the load balancer, and another from the load balancer to the CF router. This option is less performant, but it does allow for multiple certificates to be used, meaning multiple domains can be verified when using HTTPS. Certificates for the CF domains must be stored on the load balancer and, if hostname validation is enabled, on the CF router (using a single certificate). The certificate on the CF router only needs to be trusted by the load balancer, and the domain does not need to match the request as long as hostname verification is not enabled on the load balancer.

This configuration secures all traffic between the load balancer and the router.

<p class="note"><strong>Note</strong>: If your CF deployment uses a self-signed certificate, the client needs to install only the certificate stored on the load balancer.</p>

To enable this configuration, perform the following steps:

1. Add your certificate to your load balancer and configure its listening port. The procedures vary depending on your IaaS.

1. Configure your load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` headers to client requests. The procedures vary depending on your load balancer.
   <p class="note"><strong>Note</strong>: If your load balancer cannot append the <code>X-Forwarded-For</code> and 
<code>X-Forwarded-Proto</code> headers to client requests, apps requests might result in redirect loops and users will not be able to log 
in with the <code>cf CLI</code>.</p>
   <p class='note'><strong>Note</strong>: If the load balancer accepts unencrypted requests, it must 
provide the <code>X-Forwarded-Proto</code> header. Conversely, if the load balancer cannot be configured to send the 
<code>X-Forwarded-Proto</code> header, it must not accept unencrypted requests. Otherwise, apps and platform 
system components that require encrypted client requests can accept unencrypted requests that they should not.</p>

1. Insert the certificate into your deployment manifest for the CF router:
	1. Use `bosh edit deployment` to open your release manifest for editing.
	1. Copy the contents of your certificate file into the `properties.router.ssl_cert` field and the contents of the private key file associated with your certificate into the `properties.router.ssl_key` field. Set `enable_ssl` to `true`.

		```
		properties:
		  router:
		    ssl_cert: |
		      -----BEGIN CERTIFICATE-----
		      SSL_CERTIFICATE_SIGNED_BY_PRIVATE_KEY
		      -----END CERTIFICATE-----
		    ssl_key: |
		      -----BEGIN RSA PRIVATE KEY-----
		      RSA_PRIVATE_KEY
		      -----END RSA PRIVATE KEY-----
		    enable_ssl: true
		```


##<a id="lb"></a> Terminate TLS at Load Balancer Only
<%= image_tag("lb.png") %>

In this configuration, your load balancer terminates TLS and passes unencrypted traffic to the router, which routes it to your app. 
Traffic between the load balancer and the router is not encrypted.

To enable this configuration, you must perform the following steps:

1. Configure your load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` headers to client requests. The procedures vary depending on your load balancer.
<p class="note"><strong>Note</strong>: If your load balancer cannot append the <code>X-Forwarded-For</code> and 
<code>X-Forwarded-Proto</code> headers to client requests, apps might break, requests might cause redirect loops, and the <code>cf CLI</code> become inaccessible.</p>

1. Add your certificate to your load balancer and configure its listening port. The procedures vary depending on your IaaS.
